// test tcp mtu probing
//
// verify that kernel issues an mtu probe packet if sysctl enabled
//
// configure a small initial mtu, then increase during connection lifetime
// observe a larger sized segment generated by tcp_mtu_probe

// enforce strict segment checking (and turn off gso) to measure probe length
--strict_segments
--remote_ip="192.0.2.2"

// configure a small initial mtu
// increase cwnd to the minimum tcp_mtu_probe needs
`../common/defaults.sh
 ../common/set_sysctls.py \
	/proc/sys/net/ipv4/tcp_mtu_probing=2 \
	/proc/sys/net/ipv4/tcp_base_mss=512
 ip route change 192.0.2.2 via 192.168.0.2 dev tun0 advmss 600 mtu lock 640 initcwnd 11
 ethtool -K tun0 gso off tso off
`
    0 socket(..., SOCK_STREAM, IPPROTO_TCP) = 3
   +0 setsockopt(3, SOL_SOCKET, SO_REUSEADDR, [1], 4) = 0
   +0 bind(3, ..., ...) = 0
   +0 listen(3, 1) = 0

  +.1 < S  0:0(0) win 50000 <mss 1460,nop,wscale 0>
   +0 > S. 0:0(0) ack 1 win 65535 <mss 600,nop,wscale 8>
   +0 < .  1:1(0) ack 1 win 50000

  +.1 accept(3, ..., ...) = 4
   +0 setsockopt(4, SOL_SOCKET, SO_TIMESTAMPING,
		   [SOF_TIMESTAMPING_TX_SCHED | SOF_TIMESTAMPING_TX_SOFTWARE |
		    SOF_TIMESTAMPING_SOFTWARE | SOF_TIMESTAMPING_OPT_TSONLY |
		    SOF_TIMESTAMPING_OPT_ID], 4) = 0

   // increase mtu
   +0 `ip route change 192.0.2.2 via 192.168.0.2 dev tun0 advmss 1460 mtu lock 1500`

  +.1 write(4, ..., 986) = 986
   +0 > P. 1:987(986) ack 1
   +0 < .  1:1(0) ack 987 win 50000

   +0	recvmsg(4, {msg_name(...)=...,
		    msg_iov(1)=[{...,0}],
                    msg_flags=MSG_ERRQUEUE,
                    msg_control=[
			{cmsg_level=SOL_SOCKET,
			 cmsg_type=SCM_TIMESTAMPING,
			 cmsg_data={scm_sec=0,scm_nsec=304000000}},
			{cmsg_level=CMSG_LEVEL_IP,
			 cmsg_type=CMSG_TYPE_RECVERR,
			 cmsg_data={ee_errno=ENOMSG,
				    ee_origin=SO_EE_ORIGIN_TIMESTAMPING,
				    ee_type=0,
				    ee_code=0,
				    ee_info=SCM_TSTAMP_SCHED,
				    ee_data=985}}
		    ]}, MSG_ERRQUEUE) = 0

`/tmp/sysctl_restore_${PPID}.sh`
